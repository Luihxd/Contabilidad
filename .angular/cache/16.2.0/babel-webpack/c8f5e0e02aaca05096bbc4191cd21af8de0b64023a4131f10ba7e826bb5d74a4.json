{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../ingreso/ingreso.service\";\nimport * as i2 from \"../egreso/egreso.service\";\nimport * as i3 from \"ngx-toastr\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nconst _c0 = function (a0) {\n  return {\n    redfocus: a0\n  };\n};\nconst _c1 = function (a0) {\n  return {\n    red: a0\n  };\n};\n/*app-formulario\r\n  Componente formulario\r\n  Permite agregar ingresos o egresos con un formulario.\r\n*/\nexport class FormularioComponent {\n  //Se inyecta una dependencia de los servicios de ingreso y egreso.\n  constructor(ingresoServicio, egresoServicio, toastr) {\n    this.ingresoServicio = ingresoServicio;\n    this.egresoServicio = egresoServicio;\n    this.toastr = toastr;\n    //Variable que define si la operación es un ingreso o egreso,\n    //por defecto, la operación es de ingreso.\n    this.tipo = \"ingresoOperacion\";\n  }\n  ngOnInit() {}\n  //Asigna el valor del tipo de operacion cuando se cambia el valor del select del html.\n  tipoDeOperacion(evento) {\n    this.tipo = evento.target.value;\n  }\n  //Dependiendo del tipo de operación, se hace la inserción al arreglo de ingresos o\n  //egresos según corresponda.\n  agregarValor() {\n    if (this.tipo === \"ingresoOperacion\") {\n      this.ingresoServicio.agregarIngreso(this.descripcionInput, this.valorInput);\n      this.notificarInsersion(\"Ingreso\");\n    } else if (this.tipo === \"egresoOperacion\") {\n      //Si es egreso, debemos asegurar que contamos con dinero suficiente, esto con\n      //ayuda de la variable presupuestoTotal\n      if (this.valorInput > this.presupuestoTotal) {\n        //Si el valor del egreso excede el presupuesto, se notifica al usuario y\n        //no se hace la inserción\n      } else {\n        //Si no lo excede, se hace la inserción\n        this.egresoServicio.agregarEgreso(this.descripcionInput, this.valorInput);\n        this.notificarInsersion(\"Egreso\");\n      }\n    }\n  }\n  //Función para mostrar la notificación de que se hizo una inserción correctamente\n  //con el uso de la librería ngx-toastr\n  notificarInsersion(tipo) {\n    this.toastr.success(this.descripcionInput + ' de $' + this.valorInput, tipo + \" realizado con exito\");\n  }\n  notificarError(tipo) {\n    this.toastr.success(this.descripcionInput + ' de $' + this.valorInput, \"\");\n  }\n}\n_class = FormularioComponent;\n_class.ɵfac = function FormularioComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.IngresoServicio), i0.ɵɵdirectiveInject(i2.EgresoServicio), i0.ɵɵdirectiveInject(i3.ToastrService));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-formulario\"]],\n  inputs: {\n    presupuestoTotal: \"presupuestoTotal\"\n  },\n  decls: 14,\n  vars: 14,\n  consts: [[\"href\", \"/example-path-to/toastr.css\", \"rel\", \"stylesheet\"], [3, \"ngSubmit\"], [\"f\", \"ngForm\"], [1, \"agregar\"], [1, \"agregar_contenedor\"], [1, \"agregar_tipo\", 3, \"ngClass\", \"change\"], [\"value\", \"ingresoOperacion\", \"selected\", \"\"], [\"value\", \"egresoOperacion\"], [\"type\", \"text\", \"name\", \"descripcionInput\", \"placeholder\", \"Agregar Descripci\\u00F3n\", \"required\", \"\", 1, \"agregar_descripcion\", 3, \"ngClass\", \"ngModel\", \"ngModelChange\"], [\"type\", \"number\", \"name\", \"valorInput\", \"placeholder\", \"Valor\", \"required\", \"\", 1, \"agregar_valor\", 3, \"ngClass\", \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", 1, \"agregar_btn\"], [1, \"ion-ios-checkmark-outline\", 3, \"ngClass\"]],\n  template: function FormularioComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r1 = i0.ɵɵgetCurrentView();\n      i0.ɵɵelement(0, \"link\", 0);\n      i0.ɵɵelementStart(1, \"form\", 1, 2);\n      i0.ɵɵlistener(\"ngSubmit\", function FormularioComponent_Template_form_ngSubmit_1_listener() {\n        i0.ɵɵrestoreView(_r1);\n        const _r0 = i0.ɵɵreference(2);\n        return i0.ɵɵresetView(_r0.form.valid && ctx.agregarValor());\n      });\n      i0.ɵɵelementStart(3, \"div\", 3)(4, \"div\", 4)(5, \"select\", 5);\n      i0.ɵɵlistener(\"change\", function FormularioComponent_Template_select_change_5_listener($event) {\n        return ctx.tipoDeOperacion($event);\n      });\n      i0.ɵɵelementStart(6, \"option\", 6);\n      i0.ɵɵtext(7, \"Ingreso\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"option\", 7);\n      i0.ɵɵtext(9, \"Egreso\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(10, \"input\", 8);\n      i0.ɵɵlistener(\"ngModelChange\", function FormularioComponent_Template_input_ngModelChange_10_listener($event) {\n        return ctx.descripcionInput = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"input\", 9);\n      i0.ɵɵlistener(\"ngModelChange\", function FormularioComponent_Template_input_ngModelChange_11_listener($event) {\n        return ctx.valorInput = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"button\", 10);\n      i0.ɵɵelement(13, \"i\", 11);\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(6, _c0, ctx.tipo === \"egresoOperacion\"));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(8, _c0, ctx.tipo === \"egresoOperacion\"))(\"ngModel\", ctx.descripcionInput);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(10, _c0, ctx.tipo === \"egresoOperacion\"))(\"ngModel\", ctx.valorInput);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(12, _c1, ctx.tipo === \"egresoOperacion\"));\n    }\n  },\n  dependencies: [i4.NgClass, i5.ɵNgNoValidate, i5.NgSelectOption, i5.ɵNgSelectMultipleOption, i5.DefaultValueAccessor, i5.NumberValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.RequiredValidator, i5.NgModel, i5.NgForm],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["FormularioComponent","constructor","ingresoServicio","egresoServicio","toastr","tipo","ngOnInit","tipoDeOperacion","evento","target","value","agregarValor","agregarIngreso","descripcionInput","valorInput","notificarInsersion","presupuestoTotal","agregarEgreso","success","notificarError","i0","ɵɵdirectiveInject","i1","IngresoServicio","i2","EgresoServicio","i3","ToastrService","selectors","inputs","decls","vars","consts","template","FormularioComponent_Template","rf","ctx","ɵɵelement","ɵɵelementStart","ɵɵlistener","FormularioComponent_Template_form_ngSubmit_1_listener","ɵɵrestoreView","_r1","_r0","ɵɵreference","ɵɵresetView","form","valid","FormularioComponent_Template_select_change_5_listener","$event","ɵɵtext","ɵɵelementEnd","FormularioComponent_Template_input_ngModelChange_10_listener","FormularioComponent_Template_input_ngModelChange_11_listener","ɵɵadvance","ɵɵproperty","ɵɵpureFunction1","_c0","_c1"],"sources":["C:\\Users\\LuisRa\\OneDrive\\Documentos\\Cursos\\Angular\\contabilidad-app\\src\\app\\formulario\\formulario.component.ts","C:\\Users\\LuisRa\\OneDrive\\Documentos\\Cursos\\Angular\\contabilidad-app\\src\\app\\formulario\\formulario.component.html"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\r\nimport { IngresoServicio } from '../ingreso/ingreso.service';\r\nimport { EgresoServicio } from '../egreso/egreso.service';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n\r\n/*app-formulario\r\n  Componente formulario\r\n  Permite agregar ingresos o egresos con un formulario.\r\n*/\r\n@Component({\r\n  selector: 'app-formulario',\r\n  templateUrl: './formulario.component.html',\r\n  styleUrls: ['./formulario.component.css']\r\n})\r\nexport class FormularioComponent implements OnInit {\r\n\r\n  //Variable que define si la operación es un ingreso o egreso,\r\n  //por defecto, la operación es de ingreso.\r\n  tipo:string=\"ingresoOperacion\";\r\n\r\n  //Variables que corresponden a los campos de ingreso o egreso.\r\n  descripcionInput:string;\r\n  valorInput:number;\r\n\r\n  /*Variable que viene desde componente padre\r\n  app.component que inyectamos\r\n  gracias al \"@Input()\"*/\r\n  @Input() presupuestoTotal:number;\r\n\r\n  //Se inyecta una dependencia de los servicios de ingreso y egreso.\r\n  constructor(private ingresoServicio: IngresoServicio,\r\n              private egresoServicio: EgresoServicio,\r\n              private toastr: ToastrService) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  //Asigna el valor del tipo de operacion cuando se cambia el valor del select del html.\r\n  tipoDeOperacion(evento):void{\r\n    this.tipo = evento.target.value;\r\n  }\r\n\r\n  //Dependiendo del tipo de operación, se hace la inserción al arreglo de ingresos o\r\n  //egresos según corresponda.\r\n  agregarValor(){\r\n    if(this.tipo === \"ingresoOperacion\"){\r\n      this.ingresoServicio.agregarIngreso(this.descripcionInput, this.valorInput);\r\n      this.notificarInsersion(\"Ingreso\");\r\n    }else if (this.tipo === \"egresoOperacion\"){\r\n      //Si es egreso, debemos asegurar que contamos con dinero suficiente, esto con\r\n      //ayuda de la variable presupuestoTotal\r\n      if(this.valorInput > this.presupuestoTotal){\r\n        //Si el valor del egreso excede el presupuesto, se notifica al usuario y\r\n        //no se hace la inserción\r\n\r\n\r\n      }else{\r\n        //Si no lo excede, se hace la inserción\r\n        this.egresoServicio.agregarEgreso(this.descripcionInput, this.valorInput);\r\n        this.notificarInsersion(\"Egreso\");\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n\r\n  //Función para mostrar la notificación de que se hizo una inserción correctamente\r\n  //con el uso de la librería ngx-toastr\r\n  notificarInsersion(tipo: string) {\r\n    this.toastr.success(this.descripcionInput + ' de $' + this.valorInput, tipo + \" realizado con exito\");\r\n  }\r\n\r\n  notificarError(tipo: string) {\r\n    this.toastr.success(this.descripcionInput + ' de $' + this.valorInput, \"\");\r\n  }\r\n\r\n}\r\n","<script src=\"/example-path-to/jquery-2.1.4.js\"></script>\r\n<script src=\"/example-path-to/toastr.js\"></script>\r\n<link href=\"/example-path-to/toastr.css\" rel=\"stylesheet\" />\r\n\r\n<form (ngSubmit)=\"f.form.valid && agregarValor()\" #f=\"ngForm\">\r\n  <div class=\"agregar\">\r\n    <div class=\"agregar_contenedor\">\r\n\r\n      <select [ngClass]=\"{redfocus:tipo ==='egresoOperacion'}\" (change)=\"tipoDeOperacion($event)\" class=\"agregar_tipo\">\r\n        <option value=\"ingresoOperacion\" selected>Ingreso</option>\r\n        <option value=\"egresoOperacion\">Egreso</option>\r\n      </select>\r\n      <!--ngModel permite el two-way binding para que guarde el\r\n          contenido del input como valor de la variable\r\n          required hace que no se pueda hacer subdmit si este input\r\n          está vacío-->\r\n      <input [ngClass]=\"{redfocus:tipo ==='egresoOperacion'}\" type=\"text\" class=\"agregar_descripcion\"\r\n        name=\"descripcionInput\" [(ngModel)]=\"descripcionInput\" placeholder=\"Agregar Descripción\" required>\r\n\r\n      <!--ngModel permite el two-way binding para que guarde el\r\n          contenido del input como valor de la variable-->\r\n      <input [ngClass]=\"{redfocus:tipo ==='egresoOperacion'}\" type=\"number\" class=\"agregar_valor\" name=\"valorInput\"\r\n        [(ngModel)]=\"valorInput\" placeholder=\"Valor\" required>\r\n      <!--El type=\"submit\" hace que reconozca el enter\r\n              cuando se capturen los datos-->\r\n      <button type=\"submit\" class=\"agregar_btn\">\r\n        <i [ngClass]=\"{red:tipo ==='egresoOperacion'}\" class=\"ion-ios-checkmark-outline\">\r\n        </i>\r\n      </button>\r\n    </div>\r\n  </div>\r\n</form>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}