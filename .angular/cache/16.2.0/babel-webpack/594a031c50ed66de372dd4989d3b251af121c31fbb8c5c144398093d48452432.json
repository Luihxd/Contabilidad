{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./ingreso/ingreso.service\";\nimport * as i2 from \"./egreso/egreso.service\";\nimport * as i3 from \"./cabecero/cabecero.component\";\nimport * as i4 from \"./egreso/egreso.component\";\nimport * as i5 from \"./formulario/formulario.component\";\n/*app-component\r\n  Componente padre, obtiene la lista de ingresos y egresos de sus\r\n  servicios correspondientes, con ellas, puede sacar el total de\r\n  cada uno, el presupuesto para realizar egresos/gastos, y el\r\n  porcentaje de los egresos con respecto a los ingresos\r\n*/\nexport class AppComponent {\n  /*Se inyecta una dependencia de los servicios de ingreso y egreso\r\n  para inicializar los arreglos ingresos y egresos con el arreglo que\r\n  tenemos creado en los servicios*/\n  constructor(ingresoServicio, egresoServicio) {\n    this.ingresoServicio = ingresoServicio;\n    this.egresoServicio = egresoServicio;\n    //Arreglos de ingresos y egresos\n    this.ingresos = [];\n    this.egresos = [];\n    this.ingresos = ingresoServicio.ingresos;\n    this.egresos = egresoServicio.egresos;\n  }\n  //Devuelve la suma total del valor de todos los elementos\n  //del arreglo de ingresos\n  getIngresoTotal() {\n    let ingresoTotal = 0;\n    /*Funcion flecha que recorre cada elemento del arreglo\r\n    ingresos usando una variable temporal \"ingreso\" para\r\n    sumar su valor */\n    this.ingresos.forEach(ingreso => {\n      ingresoTotal += ingreso.valor;\n    });\n    return ingresoTotal;\n  }\n  //Devuelve la suma total del valor de todos los elementos\n  //del arreglo de egresos\n  getEgresoTotal() {\n    let egresoTotal = 0;\n    this.egresos.forEach(egreso => {\n      egresoTotal += egreso.valor;\n    });\n    return egresoTotal;\n  }\n  //Devuelve el valor del porcentaje de los egresos con respecto\n  //a los ingresos\n  getPorcentajeTotal() {\n    let porcentajeTotal = 0;\n    porcentajeTotal = this.getEgresoTotal() / this.getIngresoTotal();\n    return porcentajeTotal;\n  }\n  /*Devuelve el valor de la cantidad de dinero disponible\r\n  para hacer egresos/gastos, restando al total de ingresos\r\n  el total de egresos*/\n  getPresupuestoTotal() {\n    let presupuestoTotal = 0;\n    presupuestoTotal = this.getIngresoTotal() - this.getEgresoTotal();\n    return presupuestoTotal;\n  }\n}\n_class = AppComponent;\n_class.ɵfac = function AppComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.IngresoServicio), i0.ɵɵdirectiveInject(i2.EgresoServicio));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-root\"]],\n  decls: 5,\n  vars: 7,\n  consts: [[3, \"presupuestoTotal\", \"egresoTotal\", \"ingresoTotal\", \"porcentajeTotal\"], [3, \"presupuestoTotal\"], [1, \"contenedor\", \"limpiarEstilos\"], [3, \"porcentajeTotal\", \"egresoTotal\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"app-cabecero\", 0)(1, \"app-formulario\", 1);\n      i0.ɵɵelementStart(2, \"div\", 2);\n      i0.ɵɵelement(3, \"app-ingreso\")(4, \"app-egreso\", 3);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"presupuestoTotal\", ctx.getPresupuestoTotal())(\"egresoTotal\", ctx.getEgresoTotal())(\"ingresoTotal\", ctx.getIngresoTotal())(\"porcentajeTotal\", ctx.getPorcentajeTotal());\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"presupuestoTotal\", ctx.getPresupuestoTotal());\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"porcentajeTotal\", ctx.getPorcentajeTotal())(\"egresoTotal\", ctx.getEgresoTotal());\n    }\n  },\n  dependencies: [i3.CabeceroComponent, i4.EgresoComponent, i5.FormularioComponent],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["AppComponent","constructor","ingresoServicio","egresoServicio","ingresos","egresos","getIngresoTotal","ingresoTotal","forEach","ingreso","valor","getEgresoTotal","egresoTotal","egreso","getPorcentajeTotal","porcentajeTotal","getPresupuestoTotal","presupuestoTotal","i0","ɵɵdirectiveInject","i1","IngresoServicio","i2","EgresoServicio","selectors","decls","vars","consts","template","AppComponent_Template","rf","ctx","ɵɵelement","ɵɵelementStart","ɵɵelementEnd","ɵɵproperty","ɵɵadvance"],"sources":["C:\\Users\\LuisRa\\OneDrive\\Documentos\\Cursos\\Angular\\contabilidad-app\\src\\app\\app.component.ts","C:\\Users\\LuisRa\\OneDrive\\Documentos\\Cursos\\Angular\\contabilidad-app\\src\\app\\app.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { Ingreso } from './ingreso/ingreso.model';\r\nimport { Egreso } from './egreso/egreso.model';\r\nimport { IngresoServicio } from './ingreso/ingreso.service';\r\nimport { EgresoServicio } from './egreso/egreso.service';\r\n\r\n\r\n/*app-component\r\n  Componente padre, obtiene la lista de ingresos y egresos de sus\r\n  servicios correspondientes, con ellas, puede sacar el total de\r\n  cada uno, el presupuesto para realizar egresos/gastos, y el\r\n  porcentaje de los egresos con respecto a los ingresos\r\n*/\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\n\r\n\r\nexport class AppComponent {\r\n\r\n  //Arreglos de ingresos y egresos\r\n  ingresos: Ingreso[] = [];\r\n  egresos: Egreso[] = [];\r\n\r\n  /*Se inyecta una dependencia de los servicios de ingreso y egreso\r\n  para inicializar los arreglos ingresos y egresos con el arreglo que\r\n  tenemos creado en los servicios*/\r\n  constructor(private ingresoServicio:IngresoServicio,\r\n              private egresoServicio:EgresoServicio){\r\n    this.ingresos = ingresoServicio.ingresos;\r\n    this.egresos = egresoServicio.egresos;\r\n  }\r\n\r\n  //Devuelve la suma total del valor de todos los elementos\r\n  //del arreglo de ingresos\r\n  getIngresoTotal(){\r\n    let ingresoTotal:number = 0;\r\n    /*Funcion flecha que recorre cada elemento del arreglo\r\n    ingresos usando una variable temporal \"ingreso\" para\r\n    sumar su valor */\r\n    this.ingresos.forEach(ingreso=>{\r\n      ingresoTotal += ingreso.valor\r\n    });\r\n    return ingresoTotal;\r\n  }\r\n\r\n\r\n  //Devuelve la suma total del valor de todos los elementos\r\n  //del arreglo de egresos\r\n  getEgresoTotal(){\r\n    let egresoTotal:number = 0;\r\n    this.egresos.forEach(egreso=>{\r\n      egresoTotal += egreso.valor\r\n    });\r\n    return egresoTotal;\r\n  }\r\n\r\n  //Devuelve el valor del porcentaje de los egresos con respecto\r\n  //a los ingresos\r\n  getPorcentajeTotal(){\r\n    let porcentajeTotal:number = 0;\r\n    porcentajeTotal =  this.getEgresoTotal()/this.getIngresoTotal();\r\n    return porcentajeTotal;\r\n  }\r\n\r\n  /*Devuelve el valor de la cantidad de dinero disponible\r\n  para hacer egresos/gastos, restando al total de ingresos\r\n  el total de egresos*/\r\n  getPresupuestoTotal(){\r\n    let presupuestoTotal:number = 0;\r\n    presupuestoTotal = this.getIngresoTotal()-this.getEgresoTotal();\r\n    return presupuestoTotal;\r\n  }\r\n\r\n}\r\n","<!--Debemos enviar la información del componente padre (app.component)\r\n    al componente hijo (cabecero.component)\r\n    Se hace uso de property binding-->\r\n<app-cabecero\r\n[presupuestoTotal]=\"getPresupuestoTotal()\"\r\n[egresoTotal]=\"getEgresoTotal()\"\r\n[ingresoTotal]=\"getIngresoTotal()\"\r\n[porcentajeTotal]=\"getPorcentajeTotal()\"\r\n></app-cabecero>\r\n\r\n<app-formulario\r\n[presupuestoTotal]=\"getPresupuestoTotal()\">\r\n</app-formulario>\r\n\r\n  <div class=\"contenedor limpiarEstilos\">\r\n      <app-ingreso></app-ingreso>\r\n      <app-egreso\r\n      [porcentajeTotal]=\"getPorcentajeTotal()\"\r\n      [egresoTotal]=\"getEgresoTotal()\">\r\n    </app-egreso>\r\n  </div>\r\n"],"mappings":";;;;;;;AAOA;;;;;;AAaA,OAAM,MAAOA,YAAY;EAMvB;;;EAGAC,YAAoBC,eAA+B,EAC/BC,cAA6B;IAD7B,KAAAD,eAAe,GAAfA,eAAe;IACf,KAAAC,cAAc,GAAdA,cAAc;IARlC;IACA,KAAAC,QAAQ,GAAc,EAAE;IACxB,KAAAC,OAAO,GAAa,EAAE;IAOpB,IAAI,CAACD,QAAQ,GAAGF,eAAe,CAACE,QAAQ;IACxC,IAAI,CAACC,OAAO,GAAGF,cAAc,CAACE,OAAO;EACvC;EAEA;EACA;EACAC,eAAeA,CAAA;IACb,IAAIC,YAAY,GAAU,CAAC;IAC3B;;;IAGA,IAAI,CAACH,QAAQ,CAACI,OAAO,CAACC,OAAO,IAAE;MAC7BF,YAAY,IAAIE,OAAO,CAACC,KAAK;IAC/B,CAAC,CAAC;IACF,OAAOH,YAAY;EACrB;EAGA;EACA;EACAI,cAAcA,CAAA;IACZ,IAAIC,WAAW,GAAU,CAAC;IAC1B,IAAI,CAACP,OAAO,CAACG,OAAO,CAACK,MAAM,IAAE;MAC3BD,WAAW,IAAIC,MAAM,CAACH,KAAK;IAC7B,CAAC,CAAC;IACF,OAAOE,WAAW;EACpB;EAEA;EACA;EACAE,kBAAkBA,CAAA;IAChB,IAAIC,eAAe,GAAU,CAAC;IAC9BA,eAAe,GAAI,IAAI,CAACJ,cAAc,EAAE,GAAC,IAAI,CAACL,eAAe,EAAE;IAC/D,OAAOS,eAAe;EACxB;EAEA;;;EAGAC,mBAAmBA,CAAA;IACjB,IAAIC,gBAAgB,GAAU,CAAC;IAC/BA,gBAAgB,GAAG,IAAI,CAACX,eAAe,EAAE,GAAC,IAAI,CAACK,cAAc,EAAE;IAC/D,OAAOM,gBAAgB;EACzB;;SAtDWjB,YAAY;;mBAAZA,MAAY,EAAAkB,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,eAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,cAAA;AAAA;;QAAZvB,MAAY;EAAAwB,SAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,sBAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MCjBzBZ,EAAA,CAAAc,SAAA,sBAKgB;MAMdd,EAAA,CAAAe,cAAA,aAAuC;MACnCf,EAAA,CAAAc,SAAA,kBAA2B;MAK/Bd,EAAA,CAAAgB,YAAA,EAAM;;;MAhBRhB,EAAA,CAAAiB,UAAA,qBAAAJ,GAAA,CAAAf,mBAAA,GAA0C,gBAAAe,GAAA,CAAApB,cAAA,oBAAAoB,GAAA,CAAAzB,eAAA,uBAAAyB,GAAA,CAAAjB,kBAAA;MAO1CI,EAAA,CAAAkB,SAAA,GAA0C;MAA1ClB,EAAA,CAAAiB,UAAA,qBAAAJ,GAAA,CAAAf,mBAAA,GAA0C;MAMpCE,EAAA,CAAAkB,SAAA,GAAwC;MAAxClB,EAAA,CAAAiB,UAAA,oBAAAJ,GAAA,CAAAjB,kBAAA,GAAwC,gBAAAiB,GAAA,CAAApB,cAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}