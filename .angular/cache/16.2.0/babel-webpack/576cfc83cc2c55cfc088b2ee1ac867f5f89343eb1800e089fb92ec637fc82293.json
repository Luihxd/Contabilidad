{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\n/*app-egreso\r\n  Componente egreso\r\n  Muestra la lista de egresos, y da la opción de borrarlos\r\n*/\nlet EgresoComponent = class EgresoComponent {\n  /*Se inyecta una dependencia del servicio de egreso para\r\n  inicializar el arreglo de egresos que tenemos creado en\r\n  en el servicio.*/\n  constructor(egresoServicio, toastr) {\n    this.egresoServicio = egresoServicio;\n    this.toastr = toastr;\n    //Arreglo de ingresos.\n    this.egresos = [];\n  }\n  //Inicializa el arreglo (vacío) de egresos con los\n  //egresos del arreglo del egresoServicio.\n  ngOnInit() {\n    this.egresos = this.egresoServicio.egresos;\n  }\n  //Elimina del arreglo el egreso que recibe como\n  //parámetro en el html.\n  eliminarEgreso(egreso) {\n    this.egresoServicio.eliminarEgreso(egreso);\n  }\n  //Calcula el porcentaje individual de cada egreso\n  //tomando en cuenta el porcentaje total de los egresos\n  //con respecto a los ingresos.\n  calcularPorcentajeDeEgreso(egreso) {\n    return egreso.valor * this.porcentajeTotal / this.egresoTotal;\n  }\n  //Función para mostrar la notificación de que se hizo una inserción correctamente\n  //con el uso de la librería ngx-toastr\n  notificarInsersion(tipo) {\n    this.toastr.success(this.descripcionInput + ' de $' + this.valorInput, tipo + \" realizado con exito\");\n  }\n};\n__decorate([Input()], EgresoComponent.prototype, \"porcentajeTotal\", void 0);\n__decorate([Input()], EgresoComponent.prototype, \"egresoTotal\", void 0);\nEgresoComponent = __decorate([Component({\n  selector: 'app-egreso',\n  templateUrl: './egreso.component.html',\n  styleUrls: ['./egreso.component.css']\n})], EgresoComponent);\nexport { EgresoComponent };","map":{"version":3,"names":["Component","Input","EgresoComponent","constructor","egresoServicio","toastr","egresos","ngOnInit","eliminarEgreso","egreso","calcularPorcentajeDeEgreso","valor","porcentajeTotal","egresoTotal","notificarInsersion","tipo","success","descripcionInput","valorInput","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\LuisRa\\OneDrive\\Documentos\\Cursos\\Angular\\contabilidad-app\\src\\app\\egreso\\egreso.component.ts"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\r\nimport { EgresoServicio } from './egreso.service';\r\nimport { Egreso } from './egreso.model';\r\n\r\n/*app-egreso\r\n  Componente egreso\r\n  Muestra la lista de egresos, y da la opción de borrarlos\r\n*/\r\n@Component({\r\n  selector: 'app-egreso',\r\n  templateUrl: './egreso.component.html',\r\n  styleUrls: ['./egreso.component.css']\r\n})\r\nexport class EgresoComponent implements OnInit {\r\n\r\n  //Arreglo de ingresos.\r\n  egresos: Egreso[] = [];\r\n\r\n  /*Variables que vienen desde componente padre\r\n  app.component que inyectamos\r\n  gracias al \"@Input()\".*/\r\n  @Input() porcentajeTotal:number;\r\n  @Input() egresoTotal:number;\r\n\r\n  /*Se inyecta una dependencia del servicio de egreso para\r\n  inicializar el arreglo de egresos que tenemos creado en\r\n  en el servicio.*/\r\n  constructor(private egresoServicio: EgresoServicio\r\n    private toastr: ToastrService) { }\r\n\r\n  //Inicializa el arreglo (vacío) de egresos con los\r\n  //egresos del arreglo del egresoServicio.\r\n  ngOnInit(): void {\r\n    this.egresos = this.egresoServicio.egresos;\r\n  }\r\n\r\n  //Elimina del arreglo el egreso que recibe como\r\n  //parámetro en el html.\r\n  eliminarEgreso(egreso: Egreso): void{\r\n    this.egresoServicio.eliminarEgreso(egreso);\r\n  }\r\n\r\n  //Calcula el porcentaje individual de cada egreso\r\n  //tomando en cuenta el porcentaje total de los egresos\r\n  //con respecto a los ingresos.\r\n  calcularPorcentajeDeEgreso(egreso: Egreso): number{\r\n    return egreso.valor*this.porcentajeTotal/this.egresoTotal;\r\n  }\r\n\r\n  //Función para mostrar la notificación de que se hizo una inserción correctamente\r\n  //con el uso de la librería ngx-toastr\r\n  notificarInsersion(tipo: string) {\r\n    this.toastr.success(this.descripcionInput + ' de $' + this.valorInput, tipo + \" realizado con exito\");\r\n  }\r\n\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,KAAK,QAAgB,eAAe;AAIxD;;;;AASO,IAAMC,eAAe,GAArB,MAAMA,eAAe;EAW1B;;;EAGAC,YAAoBC,cAA8B,EACxCC,MAAqB;IADX,KAAAD,cAAc,GAAdA,cAAc;IACxB,KAAAC,MAAM,GAANA,MAAM;IAbhB;IACA,KAAAC,OAAO,GAAa,EAAE;EAYa;EAEnC;EACA;EACAC,QAAQA,CAAA;IACN,IAAI,CAACD,OAAO,GAAG,IAAI,CAACF,cAAc,CAACE,OAAO;EAC5C;EAEA;EACA;EACAE,cAAcA,CAACC,MAAc;IAC3B,IAAI,CAACL,cAAc,CAACI,cAAc,CAACC,MAAM,CAAC;EAC5C;EAEA;EACA;EACA;EACAC,0BAA0BA,CAACD,MAAc;IACvC,OAAOA,MAAM,CAACE,KAAK,GAAC,IAAI,CAACC,eAAe,GAAC,IAAI,CAACC,WAAW;EAC3D;EAEA;EACA;EACAC,kBAAkBA,CAACC,IAAY;IAC7B,IAAI,CAACV,MAAM,CAACW,OAAO,CAAC,IAAI,CAACC,gBAAgB,GAAG,OAAO,GAAG,IAAI,CAACC,UAAU,EAAEH,IAAI,GAAG,sBAAsB,CAAC;EACvG;CAED;AAlCUI,UAAA,EAARlB,KAAK,EAAE,C,uDAAwB;AACvBkB,UAAA,EAARlB,KAAK,EAAE,C,mDAAoB;AATjBC,eAAe,GAAAiB,UAAA,EAL3BnB,SAAS,CAAC;EACToB,QAAQ,EAAE,YAAY;EACtBC,WAAW,EAAE,yBAAyB;EACtCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,C,EACWpB,eAAe,CA0C3B;SA1CYA,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}